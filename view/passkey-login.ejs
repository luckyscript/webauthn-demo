<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Document</title>
</head>

<body>
  <h1>登录用户</h1>
  <input type="text" name="username" id="username" placeholder="用户名" autocomplete="username webauthn">
  <button type="button" onclick="handleLogin()">登录</button>

  <script>
    async function handleLogin() {
      const username = document.getElementById('username').value;
      if (!username) {
        alert('请输入用户名');
        return;
      }

      const res = await fetch('/api/passkey/login', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          username,
        }),
      });
      const json = await res.json();
      const data = await navigator.credentials.get({
        publicKey: {
          challenge: base64URLdecode(json.challengeBase64),
          allowCredentials: json.allowCredentials.map(item => ({
            type: item.type,
            id: base64URLdecode(item.credId),
            transports: item.transports.split(','),
          })),
        }
      });

      const passkey = {
        id: data.id,
        type: data.type,
        rawId: base64URLencode(data.rawId),
        response: {
          clientDataJSON: base64URLencode(data.response.clientDataJSON),
          authenticatorData: base64URLencode(data.response.authenticatorData),
          signature: base64URLencode(data.response.signature),
          userHandle: base64URLencode(data.response.userHandle),
        },
      }
      const isValid = await fetch("/api/passkey/login/validate", {
        method: "post",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(passkey)
      }).then(res => res.json());
      if (isValid.success) {
        location.href = '/index';
      }
    }

    function base64URLencode(buffer) {
      return btoa(Array.from(new Uint8Array(buffer), b => String.fromCharCode(b)).join(''))
        .replace(/\+/g, '-')
        .replace(/\//g, '_')
        .replace(/=+$/, '');
    }

    function base64URLdecode(base64URL) {
      const m = base64URL.length % 4;
      return Uint8Array.from(
        atob(
          base64URL
            .replace(/-/g, '+')
            .replace(/_/g, '/')
            .padEnd(base64URL.length + (m === 0 ? 0 : 4 - m), '=')
        ),
        c => c.charCodeAt(0)
      ).buffer;
    }
  </script>
</body>

</html>